---
# The opa-example-app-trigger Pipeline will run through several tasks:
# - source is pulled from git
# - conditions say go test must pass before moving on
# - source is built into an image by img
# - image output is pushed to ECR
# - cloudevent emitted
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: opa-example-app-trigger-pipeline
  namespace: opa-example-app-trigger
spec:
  resources:
    - name: source-repo
      type: git
    - name: image-source
      type: image
    - name: event-to-sink
      type: cloudEvent
  tasks:
    - name: build-and-push-image
      taskRef:
        name: build-and-push-image
      conditions:
      - conditionRef: "go-test"
        resources:
          - name: source-repo
            resource: source-repo
      params:
        - name: pathToContext
          value: /workspace/source-repo
      resources:
        inputs:
          - name: source-repo
            resource: source-repo
        outputs:
          - name: builtImage
            resource: image-source
    - name: deploy-locally
      taskRef:
        name: deploy-locally
      runAfter:
        - build-and-push-image
      resources:
        inputs:
          - name: source
            resource: source-repo
        outputs:
          - name: event-to-sink
            resource: event-to-sink
      params:
        - name: path
          value: /workspace/source/config/k8s/ #configure: may change according to your source
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: deploy-locally
  namespace: opa-example-app-trigger
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: path
        type: string
        description: Path to the manifests to apply
  outputs:
    resources:
    - name: event-to-sink
      type: cloudEvent
  steps:
    - name: run-kubectl
      image: lachlanevenson/k8s-kubectl
      command: ["kubectl"]
      args:
        - "replace"
        - "--force"
        - "-f"
        - "$(inputs.params.path)"
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-and-push-image
  namespace: opa-example-app-trigger
spec:
  inputs:
    resources:
      - name: source-repo
        type: git
    params:
      - name: pathToContext
        description:
          The build directory used by Kaniko
        default: /workspace/source-repo
  outputs:
    resources:
      - name: builtImage
        type: image
  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v0.15.0
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(inputs.params.pathToContext)/Dockerfile
        - --destination=$(outputs.resources.builtImage.url)
        - --context=$(inputs.params.pathToContext)
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: go-test
  namespace: opa-example-app-trigger
spec:
  resources:
    - name: source-repo
      type: git
      targetPath: go/src/github.com/font/k8s-opa-example-app
  check:
    image: golang
    command: ["go"]
    args: ["test", "./..."]
    workingDir: $(inputs.resources.source-repo.path)
    env:
      - name: GOPATH
        value: /workspace/go
---
# Finally, we need something to receive our cloudevent announcing success!
# That is this services only purpose
apiVersion: v1
kind: Service
metadata:
  name: event-display
  namespace: opa-example-app-trigger
  labels:
    app: event-display
spec:
  type: ClusterIP
  ports:
    - name: listener
      port: 8080
      protocol: TCP
  selector:
    app: event-display
---
apiVersion: v1
kind: Pod
metadata:
  name: event-display
  namespace: opa-example-app-trigger
  labels:
    app: event-display
spec:
  hostname: event-display
  containers:
  - image: gcr.io/knative-releases/github.com/knative/eventing-sources/cmd/event_display
    name: web
